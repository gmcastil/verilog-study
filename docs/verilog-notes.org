* IEEE-1364-2001 Verilog Language Standard
** Clauses
*** DONE Clause 1 - Overview
    CLOSED: [2017-02-27 Mon 21:12]
*** DONE Clause 2 - Lexical conventions
    CLOSED: [2017-02-27 Mon 21:12]
*** DONE Clause 3 - Data types
    CLOSED: [2017-03-03 Fri 18:36]
*** DONE Clause 4 - Expressions
    CLOSED: [2017-03-06 Mon 18:26]
*** DONE Clause 5 - Scheduling semantics
    CLOSED: [2017-03-06 Mon 18:53]
*** DONE Clause 6 - Assignments
    CLOSED: [2017-03-06 Mon 19:12]
*** READ Clause 7 - Gate and switch level modeling
*** READ Clause 8 - User defined primitives (UDP)
*** READ Clause 9 - Behavioral modeling
*** READ Clause 10 - Tasks and functions
*** READ Clause 11 - Hierarchical structures
*** READ Clause 13 - Configuring the contents of a design
*** READ Clause 14 - Specify blocks
*** READ Clause 15 - Timing checks
*** READ Clause 16 - Backannotation using the Standard Delay Format (SDF)
*** READ Clause 17 - System tasks and functions
*** READ Clause 18 - Value change dump (VCD) files
*** READ Clause 19 - Compiler directives
*** READ Clause 20 - PLI overview
*** READ Clause 21 - PLI TF and ACC interface mechanism
*** READ Clause 22 - Using ACC routines
*** READ Clause 23 - ACC routine definitions
*** READ Clause 24 - Using TF routines
*** READ Clause 25 - TF routine definitions
*** READ Clause 26 - Using VPI routines
*** READ Clause 27 - VPI routine definitions
** Clause 1 - Overview
Standard Delay Format (SDF) constructs
Programming Language Interface (PLI) binding mechanism
Backus Naur form
1. Lowercase words denote syntactic categories
2. Boldface for keywords, operators and punctuation marks as a required part of
   the syntax.
3. Vertical bar separates alternative items unless bolded.
4. Square brackets enclose optional items.
5. Braces enclose a repeated item
** Clause 2 - Lexical conventions
A point of clarification.  The Verilog language definition is described using
[[https://en.wikipedia.org/wiki/Backus%25E2%2580%2593Naur_form][Backus Naur form]] and makes use of metasymbols such as "::=".  This can be
interpreted as "is defined as".  The "|" is used separated alternative
definitions and is interpreted as "or".  The names enclosed in <,> are
delimiters enclosing a class name.

*** Numbers
Couple things to note here:
1. The question mark (?) is a Verilog HDL alternative for the ~z~ character.  It
   sets 4 bits to the high-impedance value in hex, 3 bits in octal, and 1 bit in
   binary.  So for example, 12'hz would be a 12-bit high-impedance value.
2. If the value is to be interpreted as signed, an ~s~ character precedes it.
   So, 4'shf denotes the 4-bit number 1111 to be interpreted as a 2's complement
   number.
3. Automatic left padding is supported by the language.  So there is nothing
   ambiguous about things like 32'b0 or 16'hz, which create a 32-bit zero number
   and a 16-bit high-impedance number, respectively.
4. The number of bits used to make up an unsized number (which is a simple
   decimal number or a number without the size specification) shall be at least
   32 bits.  So watch out when doing things like foo_reg = 0.
5. Real numbers are double precision floating point values as defined by
   IEEE-754.
6. Conversion of reals to integers is done via rounding to the nearest integer,
   rather than by truncating it.  Conversion occurs implicitly when a real
   number is assigned to an integer

*** Strings
Things to note:
1. I have no idea what strings mean in the context of design, probably in
   verification though
2. Strings are valid operands in expressions and assignments - they get treated
   as unsigned integer constants represented by a sequence of 8-bit ASCII values
   with one 8-bit ASCII value representing one character.
3. Operations with strings work the same way as they do with values - if the LHS
   is longer than the string on the RHS, it is extended with zeros.  If the RHS
   is longer, then the leftmost bits are truncated and lost.
4. Some characters can only be used when they are escaped (e.g., carriage
   returns, backslash).

*** Identifiers, keywords, and directives
- List of all keywords in Annex B
- The $ character introduces a language construct that enables development of
  user-defined tasks and functions.  These are not design semantics, but refer
  to simulator functionality.  These are described in Clause 17.
- Compiler directives are introduced by a backtick (`).  These are described in
  Clause 19.
- Standard defines a way to specify properties about objects, statements, and
  groups of statements in Verilog source.  These are referred to as *attributes*
  and the standarde defines how to specify them, but not on what they mean.  An
  example is the full_case, parallel_case attribute
#+BEGIN_SRC  verilog
(* full_case, parallel_case *)
case (foo)
  <rest_of_case_statement>
endcase
#+END_SRC
- Attributes can also be used in less familiar ways like attaching attributes to
  an operator or to a Verilog function.  There are several pages of tables
  describing the syntax of attributes when used with operators, functions,
  modules, and the rest of the language.
** Clause 3 - Data types
- Familiar four basic values are 0, 1, x, and z.
- In addition to values, /strength/ can also be added.

*** Nets and variables
Two main groups of data are *variables* and *nets*.
**** Nets
- Represent physical connections between structural entities such as gates
- Cannot store a value - rely on the value of its drivers such as a continuous
  assignment or gate (clauses 16 and 17).
- Can also include a drive and charge strength
- Wires are a type of net
**** Variables
- Abstraction of data storage elements
- Several types including signed and unsigned reg, real, integer, and time
  variables

*** Vectors
Nets or reg declarations without a range specified are scalars. Multiple bit net
and reg data types (vectors) are declared with a range. There are some
subtleties with specifying ranges.  The range specification in the standard
defines the LH value in the range to be the /msb/ constant expression and the RH
value in the range is then the /lsb/ constant expression. However, the /msb/ and
the /lsb/ are free to be any value - positive, negative, or zero, hence the
/lsb/ can actually be greater than the /msb/. This is a little odd and can
create some confusion when using the -: and +: operators. There appear to be at
least two conventions when indexing vectors:
- Arrays should always, unless there is a good reason, be 0-indexed count down
- The opposite convention holds for unpacked arrays - these are generally
  1-indexed and count up.

*** Strengths
- Drive strength which is used when placing a continuous assignment on a net
- Charge strength which is used for declaring a *trireg* type net used to model
  net capacitance.

*** Arrays

*** Namespaces
Two global namespaces:
- Definitions
- Text macros

Five local namespaces:
- Block
- Module
- Port
- Specify block
- Attribute

This section introduces the idea of named block, function, and task constructs
(see later section).  I've seen that sort of syntax before I believe.

** Clause 4 - Expressions
There are some oddities with the way that indexing of vector nets, reg, or time
are given.  Consider the following example
#+BEGIN_SRC verilog
reg [15:0]  big_vect;
reg [0:15]  little_vect;
#+END_SRC
Now consider the two expressions
#+BEGIN_SRC verilog
   big_vect[lsb_base_expression +: width_expr]
little_vect[msb_base_expression +: width_expr]

   big_vect[msb_base_expression -: width_expr]
little_vect[lsb_base_expression -: width_expr]
#+END_SRC
The first two expressions that use the /-:/ operator are selecting a slice that
is counting upwards (in the numerical direction).  It is obvious in the first
expression, but the second a little less so.  It only becomes obvious when it is
understood that in the definition of the `little_vect` the MSB is actually 0.
Similarly in the second pair of expressions - the slicing is beginning at the
larger number and descending.

The net effect of this is that the actual bits accessed by an address is in part
determined by how the original vector was assigned!  So be consistent with how
you define your signals.

*** Expression bit lengths
Number of bits of an expression (size of the expression) are determined by the
operands involved and the context:
- Self determined expression is where the bit length of the expression is solely
  determined by the expression iteself
- Context-determined expression is one where the bit length of the expression is
  determined by the bit length of the expression and the fact that it is part of
  another expression.

Table 29 shows a summary of self-determined expressions
** Clause 5 - Schedule semantics
*** Event simulation
Verilog is defined in terms of a discrete event execution model.
- Design consists of connected threads of execution or processes
- Processes are objects that can be evaluated, that may have state and that can
  respond to changes on their inputs to yield outputs
- Every change in value of a net or variable in the circuit being simulated, as
  well as the named event, is considered an update event.
- Processes are sensitive to update events - when an update event is executed,
  all the processes that are sensitive to that event are evaluated in arbitrary
  order.
- Events occur at different times (during simulation).  To make sure they are
  processed in the right order, events are kept on an event queue.

*** Event queue
The event queue is segmented into five different regions:
1. Events that occur at the current simulation time and can be processed in any
   order - these are active events.
2. Events that occur at the current simulation time, but shall be processed
   after all the active events are processed - inactive events
3. Events that have been evaluated during some previous simulation time, but
   that are assigned at this stimulation time after active and inactive events
   are processed - non-blocking assign update events
4. Events that are processed after all active, inactive, and non-blocking assign
   update events - monitor evnts
5. Future inactive and non-blocking assignment update events

*** Determinism
1. Statements within a begin-end block are executed in the order in which they
   appear in that block.
2. Non-blocking assignments performed in the order the statements were executed.

#+BEGIN_SRC verilog
initial begin
  a <= 0;
  b <= 1;
end
#+END_SRC
When this block is executed, two events are added to the non-blocking assign
update queue.  Previous rule requires they be entered in source order.  Hence,
at the end of time step 1, the variable a will be assigned 0 and then 1.

*** Nondeterminism
- Active events can be taken off the queue and processed in any order.
- Statements without time control constructs in behavioral blocks do not have to
  be executed as one event (time control statements are the # expression and @
  expression).

*** Scheduling implications of assignments
- Continuous assignment statement corresponds to a process, sensitive to the
  source elements in the expression
- Procedural continuous assignment statement corresponds to a process, sensitive
  to the source elements in the expression

So, in the example of an assignment statement - all of the source elements in
the assignment are the sensitivity list and if one changes, then that assignment
process is added to the event queue.
** Clause 6 - Assignments
Two basic forms of assignments:
- Continuous assignment, which assigns values to nets
- Procedural assignment, which assigns values to variables

Review here:
- Nets are things that represent physical connections between structural
  entitities like gates.  These are not storage elements, you cannot do
  continuous assignments on things like regs which are variables (not nets).
- Variables are abstractions of data storage elements - so values like regs,
  reals, integers.

Think about it this way - what does a real number mean in a physical sense?
Wires and regs are for different things.

*** Continuous assignments

LHS can be one of the following:
- Net (vector or scalar)
- Constant bit select of a vector net
- Constant part select of a vector net
- Constant indexed part select of a vector net
- Concatenation of any of these

Note that by 'constant', it doesn't mean that the values assigned there cannot
change, its that the selection range doesn't change.

*** Procedural assignments

LHS can be one of the following:
- Variables (vector or scalar)
- Bit-select of a vector reg, integer, or time variable
- Constant part select of a vector reg
- Memory word
- Indexed part select of a vector reg
- Concatenation of regs; bit or part selects of regs

Procedural assignments occur within procedures such as always, initial, task,
and functions.  They are 'triggered assignments' and reaching the assignment can
be controlled by conditional statements.
** Clause 7 - Gate and switch level modeling
